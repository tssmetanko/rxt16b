input {
	gelf {
		port => "12201"
		type => "gelf"
	}

	syslog {
		port => "5544"
		type => "syslog"
	}

	tcp {
		port => "55514"
		type => "json"
		codec => json {
		}
	}
}

filter {

	if [message] =~ /canary\.(jsp|aspx|php)|server\-status/ {
		drop {}
	}

	if [type] == "gelf" {
		#nothing
	}

	if [type] == "json" {
		mutate {
			gsub => ["program", ':', '']
		}
		if [json_data.timestamp] {
			date {
				#add_tag => ["tsmatch"]
				match => ["json_data.timestamp", "yyyy-MM-dd'T'HH:mm:ss Z", "yyyy-MM-dd'T'H:mm:ss Z"]
			}
		}
	}

	if [type] == "syslog" {
		grok {
			match => ["message", "^(%{NUMBER}\s+)?%{HOSTNAME:hostname}\s+(%{SYSLOGPROG}):?\s+%{GREEDYDATA:message}"]
overwrite => ["message"]
		}	

		if [program] == 'httpd' {
			grok {
				patterns_dir => "/opt/logstash/patterns"
				match => [ "message", "(%{HOST:vhost}\s+)?%{COMMONAPACHELOG}|(%{HOST:vhost}\s+)?%{COMBINEDAPACHELOG}|%{HTTPDTEMPLATE1}|%{HTTPDTEMPLATE2}" ]
			}
		}

		if [program] == 'tomcat6' {
			multiline {
				pattern => "^(%{TIME}|(:?%{MONTH} +%{MONTHDAY})|(%{YEAR}-%{MONTHNUM}-%{MONTHDAY}))"
				negate => true
				what => "previous"
			}

			mutate {
				gsub => ["message","^\.\.\.\s","    ... "]
				gsub => ["message","^at\s","	at "]
                gsub => ["message","#011","    "]
			}

			grok {
				patterns_dir => "/opt/logstash/patterns"
					match => [ "message", "%{TOMCAT1}"]
					match => [ "message", "%{TOMCAT2}" ]
					match => [ "message", "%{TOMCAT3}" ]
					match => [ "message", "%{TOMCAT4}" ]
					match => [ "message", "%{TOMCAT5}" ]
			}
		}

		if 'postfix' in [program] {
			grok {
				patterns_dir => "/opt/logstash/patterns"
					match => [ "message", "%{POSTFIX}" ]
			}
		}

		if [timestamp] {
			date {
				#add_tag => ["tsmatch"]
				match => ["timestamp", "yyyy-MM-dd HH:mm:ss HH:mm:ss,SSS","MMM dd, yyyy hh:mm:ss aa",
                                       "dd/MMM/yyyy:HH:mm:ss Z","E MMM dd HH:mm:ss yyyy"]
			}
		}
	}

	mutate {
		remove_field => [tags]
	}
}

output {
	stdout {
       codec => rubydebug 
	}

	elasticsearch_http {
		host	=> "localhost"
	}
}
